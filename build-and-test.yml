trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables: 
  - group: InternalKeys

strategy:
  matrix:
    PHP 5.6:
      phpVersion: 5.6
    PHP 7.2:
      phpVersion: 7.2
    PHP 7.3:
      phpVersion: 7.3
    PHP 7.4:
      phpVersion: 7.4

steps:
- script: |
    sudo update-alternatives --set php /usr/bin/php$(phpVersion)
    sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
    sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
    sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
    sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
    php -version
  displayName: 'Use PHP version $(phpVersion)'
  
# -----------------------------------------------------------
# This step can be used to run through the CI process with new
# versions of core pipeline dependencies before they are made 
# available externally.  
# -----------------------------------------------------------
#- script: |
#    ls
#    git -c http.https://51degrees.visualstudio.com.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" clone https://51degrees.visualstudio.com/DefaultCollection/Pipeline/_git/pipeline-php-cloudrequestengine
#    ls
#    cd pipeline-php-cloudrequestengine
#    git -c http.https://51degrees.visualstudio.com.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" checkout --track origin/hotfix/v4.2.1
#    cd ..
#    ls
#  displayName: 'Clone the development branch'

- script: |
    composer install --no-interaction --prefer-dist
  displayName: 'Install dependencies'

- script: |
    sudo rm -r /usr/local/bin/phpunit
    wget -O phpunit https://phar.phpunit.de/phpunit-5.phar
    chmod +x phpunit
    sudo mv phpunit /usr/local/bin/phpunit
  displayName: 'install PHPUnit 5'
  condition: eq(variables['phpVersion'], '5.6')

- script: |
    sed -i 's,.*name="RESOURCEKEY".*$,<env name="RESOURCEKEY" value="$(SuperResourceKey)" force="true"/>,' phpunit.xml
    sed -i 's,.*name="FOD_CLOUD_API_URL".*$,<env name="FOD_CLOUD_API_URL" value="$(FOD_CLOUD_API_URL)" force="true"/>,' phpunit.xml
    cat phpunit.xml
  displayName: 'Set resource key'

- script: |
    phpunit --log-junit test-results.xml
  displayName: 'Run tests with phpunit'
  
# Publish Test Results to Azure Pipelines/TFS
- task: PublishTestResults@2
  inputs:
    testRunner: 'JUnit'
    testResultsFiles: '**/test-results.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    mergeTestResults: false
    testRunTitle: '$(phpVersion)'
  condition: always()